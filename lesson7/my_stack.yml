AWSTemplateFormatVersion: 2010-09-09
Description: 
  Sample template to create a VPC with IGW and public IP enabled.
  You will be billed for the AWS resources used if you create a stack from this template.
  After deleting stack, remember to delete the associated S3 bucket.

Parameters:

  BucketName:
    Type: String
    Default: testbucketyo122334

  # CIDR of VPC
  NetworkCIDR:
    Description: CIDR of the new VPC
    Type: String
    Default: 10.0.0.0/16
    
  # AZ Name where subnet will be created
  AvailabilityZoneNameA:
    Description: CIDR of the new VPC
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a

  AvailabilityZoneNameB:
    Description: CIDR of the new VPC
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1b
    
  # CIDR of new subnet within this VPC
  SubnetPublicA:
    Description: CIDR of the new public subnet within this VPC for A Available zone
    Type: String
    Default: 10.0.11.0/24 

  SubnetPrivateA:
    Description: CIDR of the new private subnet within this VPC for A Available zone
    Type: String
    Default: 10.0.12.0/24 

  SubnetPublicB:
    Description: CIDR of the new private subnet within this VPC for A Available zone
    Type: String
    Default: 10.0.21.0/24 
  
  SubnetPrivateB:
    Description: CIDR of the new subnet within this VPC
    Type: String
    Default: 10.0.22.0/24 

  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: vpc-key
  
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: BucketOwnerFullControl
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        -
          Key: Description
          Value: Object Storage


  # create VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref NetworkCIDR
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: default
      Tags: 
       - Key: Name
         Value: DevopsVPC
       - Key: Application
         Value: !Ref 'AWS::StackName'
  
  # create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
       - Key: Name
         Value: demo-igw
       - Key: Application
         Value: !Ref 'AWS::StackName'           

  NatGateway:
    DependsOn: EIP
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIP.AllocationId'
      SubnetId: !Ref myPrivateSubnetA
  

  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  
  # attaching the IGW to my VPC
  vpcToIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway

  # create a custom route table for demo vpc
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags: 
       - Key: Name
         Value: public-route-table
       - Key: Application
         Value: !Ref 'AWS::StackName'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags: 
       - Key: Name
         Value: private-route-table
       - Key: Application
         Value: !Ref 'AWS::StackName'
  
  # Add routes entries for public network through igw
  myPublicRoutes:
    Type: AWS::EC2::Route    
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway      

  myPrivateRoutes:
    DependsOn: NatGateway
    Type: AWS::EC2::Route    
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway    
  
  # NACL
  myPublicNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: devops-vpc-nacl
        - Key: Application
          Value: !Ref 'AWS::StackName'        
          
  # Allow all Incoming TCP traffic
  myNaclRulesForInboundTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNACL
      RuleNumber: '100'
      Protocol: '6'  # tcp
      RuleAction: allow
      Egress: 'false'  # this rule applies to ingress traffic to the subnet
      CidrBlock: 0.0.0.0/0  # any ip address
      PortRange:
        From: '0'
        To: '65535'
          
  # Allow all Outgoing TCP traffic
  myNaclRulesForOutboundTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNACL
      RuleNumber: '100'
      Protocol: '6'  # tcp
      RuleAction: allow
      Egress: 'true'  # this rule applies to egress traffic from the subnet
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'  # client will be using ephemeral port, using 80 or 22 here will not work
        To: '65535'
                
  # creating a public subnet
  myPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref myVPC
      AvailabilityZone: !Ref AvailabilityZoneNameA
      CidrBlock: !Ref SubnetPublicA
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: 
          !Join 
          - ''
          - - 'public-subnet-'
            - !Ref AvailabilityZoneNameA
      - Key: Application
        Value: !Ref 'AWS::StackName'

  myPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref myVPC
      AvailabilityZone: !Ref AvailabilityZoneNameA
      CidrBlock: !Ref SubnetPrivateA
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: 
          !Join 
          - ''
          - - 'private-subnet-'
            - !Ref AvailabilityZoneNameA
      - Key: Application
        Value: !Ref 'AWS::StackName'
        
  myPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref myVPC
      AvailabilityZone: !Ref AvailabilityZoneNameB
      CidrBlock: !Ref SubnetPublicB
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: 
          !Join 
          - ''
          - - 'public-subnet-'
            - !Ref AvailabilityZoneNameB
      - Key: Application
        Value: !Ref 'AWS::StackName'

  myPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref myVPC
      AvailabilityZone: !Ref AvailabilityZoneNameB
      CidrBlock: !Ref SubnetPrivateB
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: 
          !Join 
          - ''
          - - 'private-subnet-'
            - !Ref AvailabilityZoneNameB
      - Key: Application
        Value: !Ref 'AWS::StackName'
  
  # asscoiate subnet with our route table else by default it is asscoiated with main route table
  mySubnetPublicARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref myPublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  mySubnetPublicBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref myPublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  
  mySubnetPrivateARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref myPrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
   
  mySubnetPrivateBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref myPrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
      
  # associate subnet with NACL else by default it is asscoiated with main NACLs
  mySubnetNaclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref myPublicSubnetA
      NetworkAclId: !Ref myPublicNACL



  # first EC2 instance which will have access for http  
  PublicInstanceA:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref myPublicSubnetA
      SecurityGroupIds:
        - !Ref PublicSecurityGroupA
      KeyName: !Ref KeyPairName
      ImageId: ami-0fc5d935ebf8bc3bc
      UserData: 
        Fn::Base64: |
          #!/bin/bash -xe
          sudo apt-get update -y # good practice to update existing packages
          sudo apt-get install -y apache2 # install web server 
          systemctl start apache2
          systemctl enable apache2
          echo "Public Server A" > /var/www/html/index.html
      Tags: 
       - Key: Name
         Value: public-ec2-A
       - Key: Application
         Value:
           Ref: "AWS::StackName"

  PublicInstanceB:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref myPublicSubnetB
      SecurityGroupIds:
        - !Ref PublicSecurityGroupB
      KeyName: !Ref KeyPairName
      ImageId: ami-0fc5d935ebf8bc3bc
      UserData: 
        Fn::Base64: |
          #!/bin/bash -xe
          sudo apt-get update -y # good practice to update existing packages
          sudo apt-get install -y apache2 # install web server 
          systemctl start apache2
          systemctl enable apache2
          echo "Public Server B" > /var/www/html/index.html
      Tags: 
       - Key: Name
         Value: public-ec2-B
       - Key: Application
         Value:
           Ref: "AWS::StackName"
  PrivateInstanceA:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref myPrivateSubnetA
      SecurityGroupIds:
        - !Ref PrivateSecurityGroupA
      KeyName: !Ref KeyPairName
      ImageId: ami-0fc5d935ebf8bc3bc
      UserData: 
        Fn::Base64: |
          #!/bin/bash -xe
          sudo apt-get update -y # good practice to update existing packages
          sudo apt-get install -y mariadb-server # install DB 
          systemctl start mariadb-server
          systemctl enable mariadb-server
      Tags: 
       - Key: Name
         Value: private-ec2-A
       - Key: Application
         Value:
           Ref: "AWS::StackName"

  PrivateInstanceB:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref myPrivateSubnetB
      SecurityGroupIds:
        - !Ref PrivateSecurityGroupB
      KeyName: !Ref KeyPairName
      ImageId: ami-0fc5d935ebf8bc3bc
      UserData: 
        Fn::Base64: |
          #!/bin/bash -xe
          sudo apt-get update -y # good practice to update existing packages
          sudo apt-get install -y mariadb-server # install DB 
          systemctl start mariadb-server
          systemctl enable mariadb-server
      Tags: 
       - Key: Name
         Value: private-ec2-B
       - Key: Application
         Value:
           Ref: "AWS::StackName"
  
  # second security group with ssh access rule
  PublicSecurityGroupA:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable ssh and HTTP(80)
      GroupName: Public-SG-A
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0 # any IP
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0 # any IP
      Tags: 
       - Key: Name
         Value: public-sg-a
       - Key: Application
         Value:
           Ref: "AWS::StackName"

  PublicSecurityGroupB:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable ssh and HTTP(80)
      GroupName: Public-SG-B
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0 # any IP
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0 # any IP
      Tags: 
       - Key: Name
         Value: public-sg-b
       - Key: Application
         Value:
           Ref: "AWS::StackName"

  PrivateSecurityGroupA:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable ssh
      GroupName: Private-SG-A
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0 # any IP
      Tags: 
       - Key: Name
         Value: private-sg-a
       - Key: Application
         Value:
           Ref: "AWS::StackName"
  
  PrivateSecurityGroupB:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable ssh
      GroupName: Private-SG-B
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0 # any IP
      Tags: 
       - Key: Name
         Value: private-sg-b
       - Key: Application
         Value:
           Ref: "AWS::StackName"
  
  # # allow only local traffic
  # PublicASGBaseIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref PublicSecurityGroupA
  #     IpProtocol: '-1'
  #     FromPort: '-1'
  #     ToPort: '-1'
  #     SourceSecurityGroupId: !Ref PublicSecurityGroupA

# output key resources ids and export the values for cross-stack referencing
Outputs:
  # VpcID:
  #   Description: ID of the newly created VPC
  #   Value: !Ref myVPC
  #   Export:
  #     Name: !Sub "${AWS::StackName}-VPCID" # the name for cross referencing
    
  # PublicSubnetAID:
  #   Description: SubnetId of the public subnet
  #   Value: !Ref myPublicSubnetA
  #   Export:
  #     Name: !Sub "${AWS::StackName}-SUBNET"

  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'vpc/vpc-nat-gateway'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  IPAddress:
    Description: 'The public IP address of the NAT gateway.'
    Value: !Ref EIP
    Export:
      Name: !Sub '${AWS::StackName}-IPAddress'